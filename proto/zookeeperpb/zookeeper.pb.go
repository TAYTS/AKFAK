// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/zookeeperpb/zookeeper.proto

package zookeeperpb

import (
	zkmessagepb "AKFAK/proto/zkmessagepb"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("proto/zookeeperpb/zookeeper.proto", fileDescriptor_4398aa17ec08b3ad)
}

var fileDescriptor_4398aa17ec08b3ad = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xaf, 0xca, 0xcf, 0xcf, 0x4e, 0x4d, 0x2d, 0x48, 0x2d, 0x2a, 0x48, 0x42, 0xb0, 0xf5,
	0xc0, 0x72, 0x42, 0x82, 0x60, 0x4a, 0x0f, 0x49, 0x89, 0x94, 0x0e, 0x54, 0x57, 0x76, 0x6e, 0x6a,
	0x71, 0x71, 0x62, 0x7a, 0x6a, 0x41, 0x92, 0x7e, 0x7a, 0x6a, 0x49, 0x7c, 0x72, 0x4e, 0x69, 0x71,
	0x49, 0x6a, 0x51, 0x7c, 0x6e, 0x6a, 0x49, 0x62, 0x4a, 0x62, 0x49, 0x22, 0xc4, 0x00, 0xa3, 0x76,
	0x46, 0x2e, 0x81, 0x28, 0x98, 0xee, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xa1, 0x62, 0x2e,
	0x21, 0xf7, 0xd4, 0x12, 0x67, 0x88, 0x0e, 0x5f, 0xa8, 0x06, 0x21, 0x1d, 0x3d, 0xa8, 0x65, 0x08,
	0x93, 0xf5, 0x30, 0x95, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48, 0xe9, 0x12, 0xa9, 0xba,
	0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89, 0xc1, 0x49, 0x32, 0x4a, 0xdc, 0xd1, 0xdb, 0xcd, 0xd1,
	0x5b, 0x1f, 0xc3, 0xd7, 0x49, 0x6c, 0x60, 0x21, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0x27, 0x43, 0xad, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZookeeperServiceClient is the client API for ZookeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZookeeperServiceClient interface {
	GetClusterMetadata(ctx context.Context, in *zkmessagepb.GetClusterMetadataRequest, opts ...grpc.CallOption) (*zkmessagepb.GetClusterMetadataResponse, error)
}

type zookeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZookeeperServiceClient(cc grpc.ClientConnInterface) ZookeeperServiceClient {
	return &zookeeperServiceClient{cc}
}

func (c *zookeeperServiceClient) GetClusterMetadata(ctx context.Context, in *zkmessagepb.GetClusterMetadataRequest, opts ...grpc.CallOption) (*zkmessagepb.GetClusterMetadataResponse, error) {
	out := new(zkmessagepb.GetClusterMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.zookeeperpb.ZookeeperService/GetClusterMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZookeeperServiceServer is the server API for ZookeeperService service.
type ZookeeperServiceServer interface {
	GetClusterMetadata(context.Context, *zkmessagepb.GetClusterMetadataRequest) (*zkmessagepb.GetClusterMetadataResponse, error)
}

// UnimplementedZookeeperServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZookeeperServiceServer struct {
}

func (*UnimplementedZookeeperServiceServer) GetClusterMetadata(ctx context.Context, req *zkmessagepb.GetClusterMetadataRequest) (*zkmessagepb.GetClusterMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterMetadata not implemented")
}

func RegisterZookeeperServiceServer(s *grpc.Server, srv ZookeeperServiceServer) {
	s.RegisterService(&_ZookeeperService_serviceDesc, srv)
}

func _ZookeeperService_GetClusterMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(zkmessagepb.GetClusterMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZookeeperServiceServer).GetClusterMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.zookeeperpb.ZookeeperService/GetClusterMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZookeeperServiceServer).GetClusterMetadata(ctx, req.(*zkmessagepb.GetClusterMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZookeeperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.zookeeperpb.ZookeeperService",
	HandlerType: (*ZookeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterMetadata",
			Handler:    _ZookeeperService_GetClusterMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zookeeperpb/zookeeper.proto",
}
